static int	ms_file_match_wc_loop(char **wc_split,
	int i, char *wc, t_file **files)
{
	int		z;
	int		wcsplitlen;
	int		nlen;
	t_file	*head;

	z = 0;
	head = (*files);
	while (head->next != NULL)
	{
		if (check_aste(wc_split, i, wc, head))
			ms_file_delete(&head);
		else
		{
			wcsplitlen = ft_strlen(wc_split[i]);
			nlen = ft_strlen(head->name);
			head->cursor = ft_str_indexof(head->name,
					wc_split[i], nlen) + wcsplitlen;
			head = head->next;
			z++;
		}
	}
	return (z);
}

void	print_lst(t_file *head)
{
	int		i;
	char	*tmp;
	char	*tmp2;

	i = 0;
	while (head->next != NULL)
	{
		if (head->prev)
			tmp2 = head->prev->name;
		else
			tmp2 = ft_strdup("nulo");
		if (head->next)
			tmp = head->next->name;
		else
			tmp = ft_strdup("nulo");
		printf("*%d) %s< %s >%s*\n", i, tmp2, head->name, tmp);
		head = head->next;
		i++;
	}
}


while (head->next != NULL)
		{
			if (check_aste(wc_split, i, wc, head))
				ms_file_delete(&head);
			else
			{
				int wcsplitlen = ft_strlen(wc_split[i]);
				int nlen = ft_strlen(head->name);
				head->cursor = ft_str_indexof(head->name,
						wc_split[i], nlen) + wcsplitlen;
				head = head->next;
				z++;
			}
		}

static int	ms_file_match_wc(char *wc, t_file **files)
{
	int		i;
	t_file	*head;
	char	**wc_split;
	int		len;
	int		z;

	i = -1;
	wc_split = ft_split(wc, '*');
	head = (*files);
	z = 0;
	len = ft_mtx_size((void **) wc_split);
	while (++i < len)
	{
		z = ms_file_match_wc_loop(wc_split, i, wc, files);
		ms_go_start(&head);
	}
	(*files) = head;
	ft_mtx_free((void **) wc_split);
	if (z == 0)
		return (0);
	return (1);
}